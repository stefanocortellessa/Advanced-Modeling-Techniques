-- @path compareMM=/compare2Ufamily/metamodels/compare.ecore
-- @path UFamiliesMM=/compare2Ufamily/metamodels/UFamily.ecore


module compare2Ufamily;
create OUT : UFamiliesMM from IN : compareMM;

-- ###################################################### HELPERS ###################################################### --

helper def : checkUnconflictMatch (cf: compareMM!Match, name : String) : Boolean =
	not cf.origin.oclIsUndefined() and
	not cf.left.oclIsUndefined() and 
	not cf.right.oclIsUndefined() and
	(name = cf.origin.oclType().name) and
	cf.differences->select(
		e | compareMM!AttributeChange.toString().endsWith(e.oclType().name))->size() = 0;

helper def: changedAttributesLeft(cf: compareMM!Match) : Boolean =
	(not cf.differences->select(e | e.source = #LEFT)->select(
		e | compareMM!AttributeChange.toString().endsWith(e.oclType().name))->isEmpty())
		and 
	(cf.differences->select(
		e | not e.conflict.oclIsUndefined())->isEmpty());

helper def: changedAttributesRight(cf: compareMM!Match) : Boolean =
	(not cf.differences->select(e | e.source = #RIGHT)->select(
		e | compareMM!AttributeChange.toString().endsWith(e.oclType().name))->isEmpty())
		and 
	(cf.differences->select(
		e | not e.conflict.oclIsUndefined())->isEmpty());

helper def: conflictingAttributes(cf: compareMM!Match) : Boolean =
	(not cf.differences->select(
		e | compareMM!AttributeChange.toString().endsWith(e.oclType().name))->isEmpty())
		and 
	(not cf.differences->select(
		e | not e.conflict.oclIsUndefined())->isEmpty());


helper def : addedElementLeft (cf: compareMM!Match, name : String) : Boolean =
	cf.origin.oclIsUndefined() and
	not cf.left.oclIsUndefined() and 
	cf.right.oclIsUndefined() and
	(name = cf.left.oclType().name);

helper def : addedElementRight (cf: compareMM!Match, name : String) : Boolean =
	cf.origin.oclIsUndefined() and
	cf.left.oclIsUndefined() and 
	not cf.right.oclIsUndefined() and
	(name = cf.right.oclType().name);	
	
	
helper def: getUnchangedElementsByNameCollection (cf: compareMM!Match, name : String) : Sequence(compareMM!Match) = 
	cf.submatches->select(e | not e.origin.oclIsUndefined())
				 ->select(e | cf.origin.refGetValue(name).includes(e.origin));

helper def: getUnchangedElementsByNameSingle (cf: compareMM!Match, name : String) : compareMM!Match = 
	cf.submatches->select(e | not e.origin.oclIsUndefined())
				 ->select(e | cf.origin.refGetValue(name) = e.origin)
				 ->first();

helper def: getAddedLeftSingle (cf: compareMM!Match, name : String) : Sequence(compareMM!Match) = 
	cf.submatches->select(e | not e.left.oclIsUndefined())
				 ->select(e | cf.left.refGetValue(name) = e.left.eContainer().refGetValue(name))
				 ->first();

helper def: getAddedLeftCollection (cf: compareMM!Match, name : String) : Sequence(compareMM!Match) = 
	cf.submatches->select(e | not e.left.oclIsUndefined())
				 ->select(e | cf.left.refGetValue(name).includes(e.left));

helper def: getAddedRightSingle (cf: compareMM!Match, name : String) : Sequence(compareMM!Match) = 
	cf.submatches->select(e | not e.left.oclIsUndefined())
				 ->select(e | cf.right.refGetValue(name) = e.right.eContainer().refGetValue(name))
				 ->first();

helper def: getAddedRightCollection (cf: compareMM!Match, name : String) : Sequence(compareMM!Match) = 
	cf.submatches->select(e | not e.right.oclIsUndefined())
				 ->select(e | cf.right.refGetValue(name).includes(e.right));

helper def : getAttributeOrigin (Match : compareMM!Match, 
					Attribute:String) : String = Match.origin.refGetValue(Attribute);

helper def : getAttribute (Match : compareMM!Match, 
					Attribute:String, direction : String) : String = Match.refGetValue(direction).refGetValue(Attribute);

--	Sequence{};
helper def: getAttributeChanged(match : compareMM!Match, name: String, direction : String) : OclAny =
	match.differences->select(e | e.attribute.name = name).first().eContainer().refGetValue(direction).refGetValue(name);

------------------------------------ References ------------------------------------
helper def : getReferenceOrigin (Match : compareMM!Match, 
					Reference:String) : String = Match.origin.refGetValue(Reference);

helper def : getReference (Match : compareMM!Match, 
					Reference:String, direction : String) : String = Match.refGetValue(direction).refGetValue(Reference);

helper def: changedReferenceLeft(cf: compareMM!Match, name: String) : Boolean =
	(not cf.differences->select(e | e.source = #LEFT)->select(
		e | compareMM!ReferenceChange.toString().endsWith(e.oclType().name))->isEmpty())
		and 
	(cf.differences->select(
		e | not e.conflict.oclIsUndefined())->isEmpty())
		and
	(name = cf.left.oclType().name);

helper def: changedReferenceRight(cf: compareMM!Match, name:String) : Boolean =
	(not cf.differences->select(e | e.source = #RIGHT)->select(
		e | compareMM!ReferenceChange.toString().endsWith(e.oclType().name))->isEmpty())
		and 
	(cf.differences->select(
		e | not e.conflict.oclIsUndefined())->isEmpty())and
	(name = cf.right.oclType().name);
------------------------------------ References ------------------------------------

-- ###################################################### HELPERS ###################################################### --

-- ####################################################### RULES ####################################################### --

------------------------------------ Matches ------------------------------------
rule match2member {
  from
    compare: compareMM!Match ( thisModule.checkUnconflictMatch(compare, 'Member') )

  to
    f: UFamiliesMM!Member (
      --attributes
      firstName <- thisModule.getAttributeOrigin(compare, 'firstName'),
      age <- thisModule.getAttributeOrigin(compare, 'age'),
      relatives <- thisModule.getReferenceOrigin(compare,'relatives')
    )
} 


rule match2familyRegistry {
  from
    compare : compareMM!Match (thisModule.checkUnconflictMatch(compare, 'FamilyRegistry'))
  to 
    uFamilies : UFamiliesMM!FamilyRegistry (
      --relations
      families <- thisModule.getUnchangedElementsByNameCollection(compare,'families')->append(
								   thisModule.getAddedLeftCollection(compare,'families'))->append(
								   thisModule.getAddedRightCollection(compare,'families'))
    )
}


rule match2family {
  from
    compare : compareMM!Match (thisModule.checkUnconflictMatch(compare, 'Family'))
  to 
    uFamilies : UFamiliesMM!Family (
    	
      --attributes
      lastName <- thisModule.getAttributeOrigin(compare, 'lastName'),
      address <- thisModule.getAttributeOrigin(compare, 'address'),      
      father <- thisModule.getUnchangedElementsByNameSingle(compare,'father'),
      mother <- thisModule.getUnchangedElementsByNameSingle(compare,'mother'),
	  
      --relations
      sons <- thisModule.getUnchangedElementsByNameCollection(compare,'sons')->append(
						   thisModule.getAddedLeftCollection(compare,'sons'))->append(
						   thisModule.getAddedRightCollection(compare,'sons')),
						  
      daughters <- thisModule.getUnchangedElementsByNameCollection(compare,'daughters')->append(
								thisModule.getAddedLeftCollection(compare,'daughters'))->append(
								thisModule.getAddedRightCollection(compare,'daughters')),
						  
      links <- thisModule.getUnchangedElementsByNameCollection(compare,'links')->append(
							thisModule.getAddedLeftCollection(compare,'links'))->append(
							thisModule.getAddedRightCollection(compare,'links'))
    )
}

------------------------------------ Matches ------------------------------------


------------------------------------ Changed Left ------------------------------------

rule changeLeft2member {
  from
   compare: compareMM!Match ( thisModule.changedAttributesLeft(compare) )
  to 
   f: UFamiliesMM!Member (
 
      --attributes
      age <- thisModule.getAttribute(compare, 'age', 'left'),
      firstName <- thisModule.getAttribute(compare, 'firstName', 'left'),
      
    
      --relations
      relatives <- thisModule.getReference(compare,'relatives', 'left')
    )
}


rule changeRefLeft2member {
  from
   compare: compareMM!Match ( thisModule.changedReferenceLeft(compare, 'member'))
  to 
   f: UFamiliesMM!Member (
 
      --attributes
      age <- thisModule.getAttribute(compare, 'age', 'left'),
      firstName <- thisModule.getAttribute(compare, 'firstName', 'left'),
      
    
      --relations
      relatives <- thisModule.getReference(compare,'relatives', 'left')
    )
}
------------------------------------ Changed Left ------------------------------------