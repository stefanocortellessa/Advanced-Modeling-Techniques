-- @path compareMM=/compare2Ufamily/metamodels/compare.ecore
-- @path UFamiliesMM=/compare2Ufamily/metamodels/UFamily.ecore


module compare2Ufamily;
create OUT : UFamiliesMM from IN : compareMM;

-- ###################################################### HELPERS ###################################################### --

helper def : checkUnconflictMatch (cf: compareMM!Match, name : String) : Boolean =
	not cf.origin.oclIsUndefined() and
	not cf.left.oclIsUndefined() and 
	not cf.right.oclIsUndefined() and
	(name = cf.origin.oclType().name) and
	cf.differences->select(
		e | compareMM!AttributeChange.toString().endsWith(e.oclType().name))->size() = 0;
	
helper def: getUnchangedElementsByNameCollection (cf: compareMM!Match, name : String) : Sequence(compareMM!Match) = 
	cf.submatches->select(e | not e.origin.oclIsUndefined())
				 ->select(e | cf.origin.refGetValue(name).includes(e.origin));

helper def: getUnchangedElementsByNameSingle (cf: compareMM!Match, name : String) : compareMM!Match = 
	cf.submatches->select(e | not e.origin.oclIsUndefined())
				 ->select(e | cf.origin.refGetValue(name) = e.origin)
				 ->first();

helper def : getAttributeOrigin (Match : compareMM!Match, 
					Attribute:String) : String = Match.origin.refGetValue(Attribute);

helper def : getAttribute (Match : compareMM!Match, 
					Attribute:String, direction : String) : String = Match.refGetValue(direction).refGetValue(Attribute);

helper def : getReferenceOrigin (Match : compareMM!Match, 
					Reference:String) : String = Match.origin.refGetValue(Reference);

helper def : getReference (Match : compareMM!Match, 
					Reference:String, direction : String) : String = Match.refGetValue(direction).refGetValue(Reference);

-- ###################################################### HELPERS ###################################################### --

-- ####################################################### RULES ####################################################### --

------------------------------------ Matches ------------------------------------

rule match2member {
  from
    compare: compareMM!Match ( thisModule.checkUnconflictMatch(compare, 'Member') )

  to
    f: UFamiliesMM!Member (
      --attributes
      firstName <- thisModule.getAttributeOrigin(compare, 'firstName'),
      age <- thisModule.getAttributeOrigin(compare, 'age'),
      relatives <- thisModule.getReferenceOrigin(compare, 'relatives')
    )
} 


rule match2familyRegistry {
  from
    compare : compareMM!Match (thisModule.checkUnconflictMatch(compare, 'FamilyRegistry'))
  to 
    uFamilies : UFamiliesMM!FamilyRegistry (
      --relations
      families <- thisModule.getUnchangedElementsByNameCollection(compare,'families')
    )
}


rule match2family {
  from
    compare : compareMM!Match (thisModule.checkUnconflictMatch(compare, 'Family'))
  to 
    uFamilies : UFamiliesMM!Family (
    	
      --attributes
      lastName <- thisModule.getAttributeOrigin(compare, 'lastName'),
      address <- thisModule.getAttributeOrigin(compare, 'address'),      
      father <- thisModule.getUnchangedElementsByNameSingle(compare,'father'),
      mother <- thisModule.getUnchangedElementsByNameSingle(compare,'mother'),
	  
      --relations
      sons <- thisModule.getUnchangedElementsByNameCollection(compare,'sons'),
						  
      daughters <- thisModule.getUnchangedElementsByNameCollection(compare,'daughters'),
						  
      links <- thisModule.getUnchangedElementsByNameCollection(compare,'links')
    )
}

------------------------------------ Matches ------------------------------------