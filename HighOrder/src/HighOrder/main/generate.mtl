[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore')]


[template public generateElement(model : EPackage) ? (model.ancestors()->isEmpty()) { modelName: String = model.name; }  ]
[comment @main/]
[file ('compare2'.concat(modelName.concat('.atl')), false, 'UTF-8')]

-- @path compareMM=/compare2Ufamily/metamodels/compare.ecore
-- @path UFamiliesMM=/compare2Ufamily/metamodels/UFamily.ecore

module compare2U[modelName/];
create OUT: U[modelName/]MM from IN: compareMM;

-- ###################################################### HELPERS ###################################################### --

helper def: checkConservative(cf: compareMM!Match, name: String): Boolean =
	not cf.origin.oclIsUndefined() and not cf.left.oclIsUndefined() and not cf.right.
			oclIsUndefined() and (name = cf.origin.oclType().name) and
			cf.differences->isEmpty();

helper def: checkContainerConflict(cf: compareMM!Match, name: String): Boolean =
	if (name = cf.origin.oclType().name)
		then not cf.refImmediateComposite().differences->collect(e | e.conflict)->select(i | not i.oclIsUndefined())->isEmpty()
		else false
		endif;

helper def: checkConflictMatch(cf: compareMM!Match, name: String): Boolean =
	not cf.origin.oclIsUndefined() and not cf.left.oclIsUndefined() and not cf.right.
			oclIsUndefined() and (name = cf.origin.oclType().name) and not cf.differences ->
			isEmpty();

helper def: changedAttributesLeft(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #LEFT) -> select(e |
			compareMM!AttributeChange.toString().endsWith(e.oclType().name)) ->
			isEmpty())and 
	(cf.differences -> select(e | not e.conflict.oclIsUndefined()) -> isEmpty()) and
			(name = cf.left.oclType().name);

helper def: changedAttributesRight(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #RIGHT) -> select(e |
			compareMM!AttributeChange.toString().endsWith(e.oclType().name)) ->
			isEmpty()) and (cf.differences -> select(e | not e.conflict.oclIsUndefined())
			-> isEmpty()) and (name = cf.right.oclType().name);

helper def: conflictingAttributes(cf: compareMM!Match, name : String): Boolean =
	(not cf.differences -> select(e | compareMM!AttributeChange.toString().endsWith(e.
			oclType().name)) -> isEmpty()) and (not cf.differences -> select(e | not e.
			conflict.oclIsUndefined()) -> isEmpty()) and
			(name = cf.left.oclType().name);

helper def: conflictingReference(cf: compareMM!Match, name : String): Boolean =
	(not cf.differences -> select(e | compareMM!ReferenceChange.toString().endsWith(e.
			oclType().name)) -> isEmpty()) and (not cf.differences -> select(e | not e.
			conflict.oclIsUndefined()) -> isEmpty()) and
			(name = cf.left.oclType().name);

helper def: addedElementLeft(cf: compareMM!Match, name: String): Boolean =
	cf.origin.oclIsUndefined() and not cf.left.oclIsUndefined() and cf.right.
			oclIsUndefined() and (name = cf.left.oclType().name);

helper def: addedElementRight(cf: compareMM!Match, name: String): Boolean =
	cf.origin.oclIsUndefined() and cf.left.oclIsUndefined() and not cf.right.
			oclIsUndefined() and (name = cf.right.oclType().name);

helper def: getUnchangedElementsByNameCollection(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.origin.oclIsUndefined()) -> select(e | cf.origin.
			refGetValue(name).includes(e.origin));

helper def: getUnchangedElementsByNameSingle(cf: compareMM!Match, name: String):
		compareMM!Match =
	cf.submatches -> select(e | not e.origin.oclIsUndefined()) -> select(e | cf.origin.
			refGetValue(name) = e.origin) -> first();

helper def: getAddedLeftSingle(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.left.oclIsUndefined()) -> select(e | cf.left.
			refGetValue(name) = e.left.eContainer().refGetValue(name)) -> first();

helper def: getAddedLeftCollection(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.left.oclIsUndefined()) -> select(e | cf.left.
			refGetValue(name).includes(e.left));

helper def: getAddedRightSingle(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.left.oclIsUndefined()) -> select(e | cf.right.
			refGetValue(name) = e.right.eContainer().refGetValue(name)) -> first();

helper def: getAddedRightCollection(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.right.oclIsUndefined()) -> select(e | cf.right.
			refGetValue(name).includes(e.right));

helper def: getAttributeOrigin(Match: compareMM!Match, Attribute: String): String =
	Match.origin.refGetValue(Attribute);

helper def: getAttribute(Match: compareMM!Match, Attribute: String, direction: String):
		String =
	Match.refGetValue(direction).refGetValue(Attribute);

--	Sequence{};
helper def: getAttributeChanged(match: compareMM!Match, name: String, direction: String):
		OclAny =
	match.differences -> select(e | e.attribute.name = name).first().eContainer().
			refGetValue(direction).refGetValue(name);

------------------------------------ References ------------------------------------

helper def: getReferenceOrigin(Match: compareMM!Match, Reference: String): String =
	Match.origin.refGetValue(Reference);

helper def: getReference(Match: compareMM!Match, Reference: String, direction: String):
		String =
	Match.refGetValue(direction).refGetValue(Reference);

helper def: changedReferenceLeft(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #LEFT) -> select(e |
			compareMM!ReferenceChange.toString().endsWith(e.oclType().name)) ->
			isEmpty()) and (cf.differences -> select(e | not e.conflict.oclIsUndefined())
			-> isEmpty()) and (name = cf.left.oclType().name);

helper def: changedReferenceRight(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #RIGHT) -> select(e |
			compareMM!ReferenceChange.toString().endsWith(e.oclType().name)) ->
			isEmpty()) and (cf.differences -> select(e | not e.conflict.oclIsUndefined())
			-> isEmpty()) and (name = cf.left.oclType().name);

------------------------------------ References ------------------------------------

-- ###################################################### HELPERS ###################################################### --
-- ####################################################### RULES ####################################################### --

------------------------------------ Matches ------------------------------------

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
[if (metaclass.eInverse()->isEmpty() and not metaclass.eAllSuperTypes->exists(e | not e.eInverse(EReference)->isEmpty()))]

rule match2[metaclass.name/] {
	from
		compare: compareMM!Match (thisModule.checkConservative(compare, '[metaclass.name/]') )
	to
		u[model.name/]: U[model.name/]MM![metaclass.name/] (
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',\n')]
			[ref.name/] <- thisModule.getUnchangedElementsByNameCollection(compare,
					'[ref.name/]') -> append(thisModule.getAddedLeftCollection(compare,
					'[ref.name/]')) -> append(thisModule.getAddedRightCollection(compare,
					'[ref.name/]'))
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_match'); 
	}
}

[else]
[if (metaclass.eInverse(EReference)->exists(e | e.upperBound = 1) or metaclass.eAllSuperTypes->exists(e | e.eInverse(EReference)->exists(e | e.upperBound = 1)))]
rule match2member {
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, 'Member') and
									not thisModule.checkContainerConflict(compare, 'Member'))
	to
		f: UFamiliesMM!Member (
			--attributes
			firstName <- thisModule.getAttributeOrigin(compare, 'firstName').debug('firstName'),
			age <- thisModule.getAttributeOrigin(compare, 'age'),
			relatives <- thisModule.getReferenceOrigin(compare, 'relatives')
		)
	do {
		compare.debug('Member_match'); 
	}
}
[else]
rule match2family {
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, 'Family'))
	to
		f: UFamiliesMM!Family (
			--attributes
			address <- thisModule.getAttribute(compare, 'address', 'left'),
			lastName <- thisModule.getAttribute(compare, 'lastName', 'left'),
			--relations
			father <- thisModule.getUnchangedElementsByNameSingle(compare, 'father'),
			mother <- thisModule.getUnchangedElementsByNameSingle(compare, 'mother'),
			sons <- thisModule.getUnchangedElementsByNameCollection(compare, 'sons') ->
					append(thisModule.getAddedLeftCollection(compare, 'sons')) ->
					append(thisModule.getAddedRightCollection(compare, 'sons')),
			daughters <- thisModule.getUnchangedElementsByNameCollection(compare,
					'daughters') -> append(thisModule.getAddedLeftCollection(compare,
					'daughters')) -> append(thisModule.getAddedRightCollection(compare,
					'daughters')),
			links <- thisModule.getReferenceOrigin(compare, 'links') ->
					append(thisModule.getAddedLeftCollection(compare, 'links')) ->
					append(thisModule.getAddedRightCollection(compare, 'links'))
		)
	do {
		compare.debug('Family_match'); 
	}
}
[/if]
[/if]
[/for]

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
rule match2u[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, 'u[metaclass.name/]') )
	to
		f: UFamiliesMM!u[metaclass.name/] (

			--attribute
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',\n')]
			[attr.name/] <- thisModule.getAttributeOrigin(compare, '[attr.name/]'),
			[/for]

			--relations
			
			uleft <- thisModule.getUnchangedElementsByNameCollection(compare, 'uleft') ->
					append(thisModule.getAddedLeftCollection(compare, 'uleft')) ->
					append(thisModule.getAddedRightCollection(compare, 'uleft')),
			uright <- thisModule.getUnchangedElementsByNameCollection(compare, 'uright')
					-> append(thisModule.getAddedLeftCollection(compare, 'uright')) ->
					append(thisModule.getAddedRightCollection(compare, 'uright')),
			upoint <- thisModule.getUnchangedElementsByNameCollection(compare, 'upoint')
					-> append(thisModule.getAddedLeftCollection(compare, 'upoint')) ->
					append(thisModule.getAddedRightCollection(compare, 'upoint'))
		)
	do {
		compare.debug('u[metaclass.name/]_match'); 
	}
}
[/for]

[/file]
[/template]
