[comment encoding = UTF-8 /]
[module generate('http://www.eclipse.org/emf/2002/Ecore')]


[template public generateElement(model : EPackage) ? (model.ancestors()->isEmpty()) { modelName: String = model.name; }  ]
[comment @main/]
[file ('compare2'.concat(modelName.concat('.atl')), false, 'UTF-8')]

-- @path compareMM=/compare2Ufamily/metamodels/compare.ecore
-- @path UFamiliesMM=/compare2Ufamily/metamodels/UFamily.ecore

module compare2U[modelName/];
create OUT: U[modelName/]MM from IN: compareMM;

-- ###################################################### HELPERS ###################################################### --

helper def: checkConservative(cf: compareMM!Match, name: String): Boolean =
	not cf.origin.oclIsUndefined() and not cf.left.oclIsUndefined() and not cf.right.
			oclIsUndefined() and (name = cf.origin.oclType().name) and
			cf.differences->isEmpty();

helper def: checkContainerConflict(cf: compareMM!Match, name: String): Boolean =
	if (name = cf.origin.oclType().name)
		then not cf.refImmediateComposite().differences->collect(e | e.conflict)->select(i | not i.oclIsUndefined())->isEmpty()
		else false
		endif;

helper def: checkConflictMatch(cf: compareMM!Match, name: String): Boolean =
	not cf.origin.oclIsUndefined() and not cf.left.oclIsUndefined() and not cf.right.
			oclIsUndefined() and (name = cf.origin.oclType().name) and not cf.differences ->
			isEmpty();

helper def: changedAttributesLeft(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #LEFT) -> select(e |
			compareMM!AttributeChange.toString().endsWith(e.oclType().name)) ->
			isEmpty())and 
	(cf.differences -> select(e | not e.conflict.oclIsUndefined()) -> isEmpty()) and
			(name = cf.left.oclType().name);

helper def: changedAttributesRight(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #RIGHT) -> select(e |
			compareMM!AttributeChange.toString().endsWith(e.oclType().name)) ->
			isEmpty()) and (cf.differences -> select(e | not e.conflict.oclIsUndefined())
			-> isEmpty()) and (name = cf.right.oclType().name);

helper def: conflictingAttributes(cf: compareMM!Match, name : String): Boolean =
	(not cf.differences -> select(e | compareMM!AttributeChange.toString().endsWith(e.
			oclType().name)) -> isEmpty()) and (not cf.differences -> select(e | not e.
			conflict.oclIsUndefined()) -> isEmpty()) and
			(name = cf.left.oclType().name);

helper def: conflictingReference(cf: compareMM!Match, name : String): Boolean =
	(not cf.differences -> select(e | compareMM!ReferenceChange.toString().endsWith(e.
			oclType().name)) -> isEmpty()) and (not cf.differences -> select(e | not e.
			conflict.oclIsUndefined()) -> isEmpty()) and
			(name = cf.left.oclType().name);

helper def: addedElementLeft(cf: compareMM!Match, name: String): Boolean =
	cf.origin.oclIsUndefined() and not cf.left.oclIsUndefined() and cf.right.
			oclIsUndefined() and (name = cf.left.oclType().name);

helper def: addedElementRight(cf: compareMM!Match, name: String): Boolean =
	cf.origin.oclIsUndefined() and cf.left.oclIsUndefined() and not cf.right.
			oclIsUndefined() and (name = cf.right.oclType().name);

helper def: getUnchangedElementsByNameCollection(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.origin.oclIsUndefined()) -> select(e | cf.origin.
			refGetValue(name).includes(e.origin));

helper def: getUnchangedElementsByNameSingle(cf: compareMM!Match, name: String):
		compareMM!Match =
	cf.submatches -> select(e | not e.origin.oclIsUndefined()) -> select(e | cf.origin.
			refGetValue(name) = e.origin) -> first();

helper def: getAddedLeftSingle(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.left.oclIsUndefined()) -> select(e | cf.left.
			refGetValue(name) = e.left.eContainer().refGetValue(name)) -> first();

helper def: getAddedLeftCollection(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.left.oclIsUndefined()) -> select(e | cf.left.
			refGetValue(name).includes(e.left));

helper def: getAddedRightSingle(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.left.oclIsUndefined()) -> select(e | cf.right.
			refGetValue(name) = e.right.eContainer().refGetValue(name)) -> first();

helper def: getAddedRightCollection(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.right.oclIsUndefined()) -> select(e | cf.right.
			refGetValue(name).includes(e.right));

helper def: getAttributeOrigin(Match: compareMM!Match, Attribute: String): String =
	Match.origin.refGetValue(Attribute);

helper def: getAttribute(Match: compareMM!Match, Attribute: String, direction: String):
		String =
	Match.refGetValue(direction).refGetValue(Attribute);

--	Sequence{};
helper def: getAttributeChanged(match: compareMM!Match, name: String, direction: String):
		OclAny =
	match.differences -> select(e | e.attribute.name = name).first().eContainer().
			refGetValue(direction).refGetValue(name);

------------------------------------ References ------------------------------------

[for (metaclass : EClass | model.eContents(EClass))]
[for (ref : EReference | metaclass.eAllReferences)] [if (ref.containment = false)] [if (ref.upperBound = 1)]
helper def: get[metaclass.name/]_[ref.name/](Match: compareMM!Match): String =
	if (not Match.origin.[ref.name/].oclIsUndefined()) then 
                          compareMM!Match.allInstances()
                            ->select(e | not e.origin.oclIsUndefined())
                              ->select(e | e.origin.oclIsTypeOf(U[model.name/]MM![metaclass.name/]))
                                ->select(e | (e.origin = Match.origin.[ref.name/])).first()
                        else OclUndefined endif;
[/if][/if][/for][/for]

[for (metaclass : EClass | model.eContents(EClass))]
[for (ref : EReference | metaclass.eAllReferences)] [if (ref.containment = false)] [if (ref.upperBound <> 1)]
helper def : get[metaclass.name/]_links ([ref.name/]_ref_changes : compareMM!ReferenceChange, [metaclass.name/]_match : compareMM!Match) : Sequence(U[model.name/]MM![metaclass.name/]) =
  if (not [ref.name/]_ref_changes.first().oclIsUndefined()) 
  then if ([ref.name/]_ref_changes.first().source = #LEFT) 
      then compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(U[model.name/]MM![metaclass.name/]))
          ->select(e | [metaclass.name/]_match.left.[ref.name/]->collect(e | e.lastName).includes(e.origin.lastName))
      else compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(U[model.name/]MM![metaclass.name/]))
          ->select(e | [metaclass.name/]_match.right.[ref.name/]->collect(e | e.lastName).includes(e.origin.lastName))
      endif
  else compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | [metaclass.name/]_match.origin.[ref.name/].includes(e.origin)) endif;
[/if][/if][/for][/for]

helper def: getReference(Match: compareMM!Match, Reference: String, direction: String):
		String =
	Match.refGetValue(direction).refGetValue(Reference);

helper def: changedReferenceLeft(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #LEFT) -> select(e |
			compareMM!ReferenceChange.toString().endsWith(e.oclType().name)) ->
			isEmpty()) and (cf.differences -> select(e | not e.conflict.oclIsUndefined())
			-> isEmpty()) and (name = cf.left.oclType().name);

helper def: changedReferenceRight(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #RIGHT) -> select(e |
			compareMM!ReferenceChange.toString().endsWith(e.oclType().name)) ->
			isEmpty()) and (cf.differences -> select(e | not e.conflict.oclIsUndefined())
			-> isEmpty()) and (name = cf.left.oclType().name);

------------------------------------ References ------------------------------------

-- ###################################################### HELPERS ###################################################### --
-- ####################################################### RULES ####################################################### --

------------------------------------ Matches ------------------------------------

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
[if (metaclass.eInverse()->isEmpty() and not metaclass.eAllSuperTypes->exists(e | not e.eInverse(EReference)->isEmpty()))] [comment FamilyRegistry/]
rule match2[metaclass.name/] {
	from
		compare: compareMM!Match (thisModule.checkConservative(compare, '[metaclass.name/]') )
	to
		u[model.name/]: U[model.name/]MM![metaclass.name/] (
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.getUnchangedElementsByNameCollection(compare,
					'[ref.name/]') -> append(thisModule.getAddedLeftCollection(compare,
					'[ref.name/]')) -> append(thisModule.getAddedRightCollection(compare,
					'[ref.name/]'))
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_match'); 
	}
}
[elseif (metaclass.eInverse(EReference)->exists(e | e.upperBound = 1) or metaclass.eAllSuperTypes->exists(e | e.eInverse(EReference)->exists(e | e.upperBound = 1)))]
rule match2[metaclass.name/] { [comment Member/]
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, '[metaclass.name/]') and
									not thisModule.checkContainerConflict(compare, '[metaclass.name/]'))
	to
		f: U[model.name/]MM![metaclass.name/] (
			--attributes
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttributeOrigin(compare, '[attr.name/]')
			[/for],

			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.get[metaclass.name/]_[ref.name/](compare)
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_match'); 
	}
}
[else]
rule match2[metaclass.name/] { [comment Family/]
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, '[metaclass.name/]'))
	using {    
		noContainmentReferences : compareMM!ReferenceChange = compare.differences 
								->select(e | e.oclIsTypeOf(compareMM!ReferenceChange))
								->select(e | e.reference.containment = false);

		[for (ref : EReference | metaclass.eAllReferences)] [if (ref.containment = false)]
      	[ref.name/] : compareMM!ReferenceChange = noContainmentReferences 
								->select(e | e.reference.name = '[ref.name/]');     
		[/if][/for] 
	}
	to
		fop: U[modelName/]MM![metaclass.name/] (
			--attributes
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'left')
			[/for],

			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')] 
			[if (ref.containment = true)]
			[if (ref.upperBound = 1)]
			[ref.name/] <- thisModule.getUnchangedElementsByNameSingle(compare, '[ref.name/]')
			[else]
			[ref.name/] <- thisModule.getUnchangedElementsByNameCollection(compare, '[ref.name/]') ->
					append(thisModule.getAddedLeftCollection(compare, '[ref.name/]')) ->
					append(thisModule.getAddedRightCollection(compare, '[ref.name/]'))
			[/if]
			[/if]
			[if (ref.containment = false)]
			[ref.name/] <- thisModule.get[metaclass.name/]_[ref.name/]([ref.name/], compare)
			[/if]
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_match'); 
	}
}
[/if]
[/for]


[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
rule match2u[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, 'u[metaclass.name/]') )
	to
		f: U[modelName/]MM!u[metaclass.name/] (

			--attribute
			name <- thisModule.getAttributeOrigin(compare, 'name'),

			--relations
			
			uleft <- thisModule.getUnchangedElementsByNameCollection(compare, 'uleft') ->
					append(thisModule.getAddedLeftCollection(compare, 'uleft')) ->
					append(thisModule.getAddedRightCollection(compare, 'uleft')),
			uright <- thisModule.getUnchangedElementsByNameCollection(compare, 'uright')
					-> append(thisModule.getAddedLeftCollection(compare, 'uright')) ->
					append(thisModule.getAddedRightCollection(compare, 'uright')),
			upoint <- thisModule.getUnchangedElementsByNameCollection(compare, 'upoint')
					-> append(thisModule.getAddedLeftCollection(compare, 'upoint')) ->
					append(thisModule.getAddedRightCollection(compare, 'upoint'))
		)
	do {
		compare.debug('u[metaclass.name/]_match'); 
	}
}
[/for]

------------------------------------ Matches 4 -- uMembers------------------------------------
------------------------------------------ Added Left ----------------------------------------

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
[if (metaclass.eInverse()->isEmpty() and not metaclass.eAllSuperTypes->exists(e | not e.eInverse(EReference)->isEmpty()))]
rule addedLeft2[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, '[metaclass.name/]') )
	to
		f: U[modelName/]MM![metaclass.name/] (
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.getAddedLeftCollection(compare, '[ref.name/]')
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_add_L'); 
	}
}
[else]
[if (metaclass.eInverse(EReference)->exists(e | e.upperBound = 1) or metaclass.eAllSuperTypes->exists(e | e.eInverse(EReference)->exists(e | e.upperBound = 1)))]
rule addedLeft2[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, '[metaclass.name/]') )
	to
		f: UFamiliesMM![metaclass.name/] (
			--attributes
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'left')
			[/for],
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.getAddedLeftSingle(compare, '[ref.name/]')
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_add_L'); 
	}
}
[else] 
rule addedLeft2[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, '[metaclass.name/]') )
	to
		f: U[modelName/]MM![metaclass.name/] (
			--attributes
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, 'lastName', 'left')
			[/for],
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[if (ref.upperBound = 1)]
			[ref.name/] <- thisModule.getAddedLeftSingle(compare, '[ref.name/]')
			[else]
			[ref.name/] <- thisModule.getAddedLeftCollection(compare, '[ref.name/]')
			[/if]
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_add_L'); 
	}
}
[/if]
[/if]
[/for]


[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
rule addedLeft2u[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, 'u[metaclass.name/]') )
	to
		f: U[modelName/]MM!u[metaclass.name/] (
			
			--attribute
			[if (not metaclass.eAllAttributes->isEmpty())]
				[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
				[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'left')
				[/for],
			[/if]

			--relations			
			uleft <- thisModule.getAddedLeftCollection(compare, 'uleft'),
			uright <- thisModule.getAddedLeftCollection(compare, 'uright'),
			upoint <- thisModule.getAddedLeftCollection(compare, 'upoint')
		)
	do {
		compare.debug('u[metaclass.name/]_add_L'); 
	}
}
[/for]

------------------------------------ Added Left ------------------------------------
------------------------------------ Added Right ------------------------------------

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
[if (metaclass.eInverse()->isEmpty() and not metaclass.eAllSuperTypes->exists(e | not e.eInverse(EReference)->isEmpty()))]
rule addedRight2[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, '[metaclass.name/]') )
	to
		f: U[modelName/]MM![metaclass.name/] (
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.getAddedRightCollection(compare, '[ref.name/]')
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_add_R'); 
	}
}
[else]
[if (metaclass.eInverse(EReference)->exists(e | e.upperBound = 1) or metaclass.eAllSuperTypes->exists(e | e.eInverse(EReference)->exists(e | e.upperBound = 1)))]
rule addedRight2[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, '[metaclass.name/]') )
	to
		f: U[modelName/]MM![metaclass.name/] (
			--attributes
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'right')
			[/for],
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.getAddedRightSingle(compare, '[ref.name/]')
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_add_R'); 
	}
}
[else]
rule addedRight2[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, '[metaclass.name/]') )
	to
		f: U[modelName/]MM![metaclass.name/] (
			--attributes
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, 'lastName', 'right')
			[/for],
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[if (ref.upperBound = 1)]
			[ref.name/] <- thisModule.getAddedRightSingle(compare, '[ref.name/]')
			[else]
			[ref.name/] <- thisModule.getAddedRightCollection(compare, '[ref.name/]')
			[/if]
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_add_R'); 
	}
}
[/if]
[/if]
[/for]


[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
rule addedRight2u[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, 'u[metaclass.name/]') )
	to
		f: U[modelName/]MM!u[metaclass.name/] (

			--attribute
			[if (not metaclass.eAllAttributes->isEmpty())]
				[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
				[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'right')
				[/for],
			[/if]

			--relations			
			uleft <- thisModule.getAddedRightCollection(compare, 'uleft'),
			uright <- thisModule.getAddedRightCollection(compare, 'uright'),
			upoint <- thisModule.getAddedRightCollection(compare, 'upoint')
		)
	do {
		compare.debug('u[metaclass.name/]_add_R'); 
	}
}
[/for]

------------------------------------ Added Right ------------------------------------

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
[if (metaclass.eInverse()->isEmpty() and not metaclass.eAllSuperTypes->exists(e | not e.eInverse(EReference)->isEmpty()))]
[comment FamilyRegistry/]
[else]
[if (metaclass.eInverse(EReference)->exists(e | e.upperBound = 1) or metaclass.eAllSuperTypes->exists(e | e.eInverse(EReference)->exists(e | e.upperBound = 1)))]
[comment Member/]
[else]
rule changeLeftandRight2[metaclass.name/] {
	from compare: compareMM!Match (
		(thisModule.changedAttributesLeft(compare, '[metaclass.name/]') and thisModule.changedAttributesRight(compare, '[metaclass.name/]'))
		or
		(thisModule.changedReferenceLeft(compare, '[metaclass.name/]') and thisModule.changedReferenceRight(compare, '[metaclass.name/]'))
		)
	to
		f: U[modelName/]MM![metaclass.name/] (
			--attribute
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'origin')
			[/for],
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[if (ref.upperBound = 1) ]
			[ref.name/] <- thisModule.getUnchangedElementsByNameSingle(compare, '[ref.name/]')
			[else]
			[ref.name/] <- thisModule.getUnchangedElementsByNameCollection(compare, '[ref.name/]') ->
					append(thisModule.getAddedLeftCollection(compare, '[ref.name/]')) ->
					append(thisModule.getAddedRightCollection(compare, '[ref.name/]'))
			[/if]
			[/for]
		)
	do {
		compare.debug('changes2[metaclass.name/]'); 
	}
}
[/if]
[/if]
[/for]

------------------------------------ Changed Left ------------------------------------

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
[if (metaclass.eInverse()->isEmpty() and not metaclass.eAllSuperTypes->exists(e | not e.eInverse(EReference)->isEmpty()))]
rule changeLeft2[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.changedAttributesLeft(compare, '[metaclass.name/]') or 
			thisModule.changedReferenceLeft(compare, '[metaclass.name/]') )
	to
		f: U[modelName/]MM![metaclass.name/] (
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',\n')]
			[ref.name/] <- thisModule.getAddedLeftCollection(compare, '[ref.name/]')
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_changed_L'); 
	}
}
[else]
[if (metaclass.eInverse(EReference)->exists(e | e.upperBound = 1) or metaclass.eAllSuperTypes->exists(e | e.eInverse(EReference)->exists(e | e.upperBound = 1)))]
rule changeLeft2[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.changedAttributesLeft(compare, 'Member') or 
			thisModule.changedReferenceLeft(compare, 'Member') )
	to
		f: U[modelName/]MM![metaclass.name/] (
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'left')
			[/for],
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.get[metaclass.name/]_[ref.name/](compare)
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_changed_L'); 
	}
}
[else]
rule changeLeft2[metaclass.name/] {
	from
		compare: compareMM!Match ( 
			(thisModule.changedAttributesLeft(compare, '[metaclass.name/]') and not thisModule.changedAttributesRight(compare, '[metaclass.name/]'))
			or 
			(thisModule.changedReferenceLeft(compare, '[metaclass.name/]') and not thisModule.changedReferenceRight(compare, '[metaclass.name/]'))
			)
	to
		f: U[modelName/]MM![metaclass.name/] (
			--attribute
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'left')
			[/for],

			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[if (ref.upperBound = 1)]
			[ref.name/] <- thisModule.getUnchangedElementsByNameSingle(compare, '[ref.name/]')
			[else]
			[ref.name/] <- thisModule.getUnchangedElementsByNameCollection(compare,
					'[ref.name/]') -> append(thisModule.getAddedLeftCollection(compare,
					'[ref.name/]')) -> append(thisModule.getAddedRightCollection(compare,
					'[ref.name/]'))
			[/if]
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_changed_L'); 
	}
}
[/if]
[/if]
[/for]

------------------------------------ Changed Left -------------------------------------
------------------------------------ Changed Right ------------------------------------

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
[if (metaclass.eInverse()->isEmpty() and not metaclass.eAllSuperTypes->exists(e | not e.eInverse(EReference)->isEmpty()))]

rule changeRight2[metaclass.name/] {
	from
		compare: compareMM!Match ( thisModule.changedAttributesRight(compare, '[metaclass.name/]') or 
			thisModule.changedReferenceRight(compare, '[metaclass.name/]') )
	to
		f: U[modelName/]MM![metaclass.name/] (
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.getAddedRightCollection(compare, '[ref.name/]')
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_changed_R'); 
	}
}

[else]
[if (metaclass.eInverse(EReference)->exists(e | e.upperBound = 1) or metaclass.eAllSuperTypes->exists(e | e.eInverse(EReference)->exists(e | e.upperBound = 1)))]

rule changeRight2[metaclass.name/] {
	from
		compare: compareMM!Match (
			thisModule.changedAttributesRight(compare, '[metaclass.name/]') or thisModule.
					changedReferenceRight(compare, '[metaclass.name/]')
		)
	to
		f: U[modelName/]MM![metaclass.name/] (
			--attribute
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'right')
			[/for],

			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.get[metaclass.name/]_[ref.name/](compare, '[ref.name/]', 'right')
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_changed_R'); 
	}
}
[else]
rule changeRight2[metaclass.name/] {
	from
		compare: compareMM!Match (
			(thisModule.changedAttributesRight(compare, '[metaclass.name/]') and not thisModule.changedAttributesLeft(compare, '[metaclass.name/]')) 
			or 
			(thisModule.changedReferenceRight(compare, '[metaclass.name/]') and not thisModule.changedReferenceLeft(compare, '[metaclass.name/]'))
			)
	to
		f: U[modelName/]MM![metaclass.name/] (
			--attribute
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'right')
			[/for],
			
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[if (ref.upperBound = 1)]
			[ref.name/] <- thisModule.getUnchangedElementsByNameSingle(compare, '[ref.name/]')
			[else]
			[ref.name/] <- thisModule.getUnchangedElementsByNameCollection(compare, '[ref.name/]') ->
					append(thisModule.getAddedLeftCollection(compare, '[ref.name/]')) ->
					append(thisModule.getAddedRightCollection(compare, '[ref.name/]'))
			[/if]
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_changed_R'); 
	}
}
[/if]
[/if]
[/for]

------------------------------------ Changed Right ------------------------------------
-------------------------------------- Conflicts --------------------------------------

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
[if (metaclass.eInverse()->isEmpty() and not metaclass.eAllSuperTypes->exists(e | not e.eInverse(EReference)->isEmpty()))]
[comment FamilyRegistry/]
[else]
[if (metaclass.eInverse(EReference)->exists(e | e.upperBound = 1) or metaclass.eAllSuperTypes->exists(e | e.eInverse(EReference)->exists(e | e.upperBound = 1)))]
rule ConflictA[metaclass.name/] {
	from
		match: compareMM!Match (
			thisModule.conflictingAttributes(match, '[metaclass.name/]') or thisModule.
					conflictingReference(match, '[metaclass.name/]')
		)
	to
		f: U[modelName/]MM!u[metaclass.name/] (
			uleft <- left,
			uright <- right,
			utype <- #OR
		),
		left: U[modelName/]MM![metaclass.name/] (
			--attribute
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(match, '[attr.name/]', 'left')
			[/for],

			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.getReference(match, '[ref.name/]', 'left')
			[/for]
		),
		right: U[modelName/]MM![metaclass.name/] (
			--attribute
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(match, '[attr.name/]', 'right')
			[/for],
			
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[ref.name/] <- thisModule.getReference(match, '[ref.name/]', 'right')
			[/for]
		)
	do {
		match.debug('[metaclass.name/]_conflict'); 
	}
}
[else]
rule ConflictA[metaclass.name/] {
	from
		compare: compareMM!Match (
			thisModule.conflictingAttributes(compare, '[metaclass.name/]') or thisModule.
					conflictingReference(compare, '[metaclass.name/]')
		)
	to
		f: U[modelName/]MM!u[metaclass.name/] (
			uleft <- left,
			uright <- right,
			utype <- #OR
		),
		left: U[modelName/]MM![metaclass.name/] (
			--attributes
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'left')
			[/for],
			
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[if (ref.upperBound = 1)]
			[ref.name/] <- thisModule.cloneMembers(compare.origin.[ref.name/])
			[else]
			[ref.name/] <- compare.origin.[ref.name/] -> collect(e |thisModule.cloneMembers(e))
			[/if]
			[/for]
		),
		right: U[modelName/]MM![metaclass.name/] (
			--attributes
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- thisModule.getAttribute(compare, '[attr.name/]', 'right')
			[/for],
			
			--relations
			[for (ref : EReference | metaclass.eAllReferences)separator(',')]
			[if (ref.upperBound = 1)]
			[ref.name/] <- thisModule.cloneMembers(compare.origin.[ref.name/])
			[else]
			[ref.name/] <- compare.origin.[ref.name/] -> collect(e |thisModule.cloneMembers(e))
			[/if]
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_conflict'); 
	}
}
[/if]
[/if]
[/for]

------------------------------------ Lazy rule --------------------------------------

[for (metaclass : EClass | model.eContents(EClass))separator('\n\n')]
[if (metaclass.eInverse()->isEmpty() and not metaclass.eAllSuperTypes->exists(e | not e.eInverse(EReference)->isEmpty()))]
[comment FamilyRegistry/]
[else]
[if (metaclass.eInverse(EReference)->exists(e | e.upperBound = 1) or metaclass.eAllSuperTypes->exists(e | e.eInverse(EReference)->exists(e | e.upperBound = 1)))]
lazy rule clone[metaclass.name/] {
	from 
		compare: U[modelName/]MM![metaclass.name/] (
			thisModule.checkConservative(compare, '[metaclass.name/]') 
		)
	to 
		[metaclass.name/]: U[modelName/]MM![metaclass.name/] (
			--attributes
			[for (attr : EAttribute | metaclass.eAllAttributes)separator(',')]
			[attr.name/] <- compare.[attr.name/]
			[/for]
		)
	do {
		compare.debug('[metaclass.name/]_clone'); 
	}
}
[else]
[comment Family/]
[/if]
[/if]
[/for]
[/file]
[/template]