
-- @path compareMM=/compare2Ufamily/metamodels/compare.ecore
-- @path UFamiliesMM=/compare2Ufamily/metamodels/UFamily.ecore

module compare2UFamilies;
create OUT: UFamiliesMM from IN: compareMM;

-- ###################################################### HELPERS ###################################################### --

helper def: checkConservative(cf: compareMM!Match, name: String): Boolean =
	not cf.origin.oclIsUndefined() and not cf.left.oclIsUndefined() and not cf.right.
			oclIsUndefined() and (name = cf.origin.oclType().name) and
			cf.differences->isEmpty();

helper def: checkContainerConflict(cf: compareMM!Match, name: String): Boolean =
	if (name = cf.origin.oclType().name)
		then not cf.refImmediateComposite().differences->collect(e | e.conflict)->select(i | not i.oclIsUndefined())->isEmpty()
		else false
		endif;

helper def: checkConflictMatch(cf: compareMM!Match, name: String): Boolean =
	not cf.origin.oclIsUndefined() and not cf.left.oclIsUndefined() and not cf.right.
			oclIsUndefined() and (name = cf.origin.oclType().name) and not cf.differences ->
			isEmpty();

helper def: changedAttributesLeft(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #LEFT) -> select(e |
			compareMM!AttributeChange.toString().endsWith(e.oclType().name)) ->
			isEmpty())and 
	(cf.differences -> select(e | not e.conflict.oclIsUndefined()) -> isEmpty()) and
			(name = cf.left.oclType().name);

helper def: changedAttributesRight(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #RIGHT) -> select(e |
			compareMM!AttributeChange.toString().endsWith(e.oclType().name)) ->
			isEmpty()) and (cf.differences -> select(e | not e.conflict.oclIsUndefined())
			-> isEmpty()) and (name = cf.right.oclType().name);

helper def: conflictingAttributes(cf: compareMM!Match, name : String): Boolean =
	(not cf.differences -> select(e | compareMM!AttributeChange.toString().endsWith(e.
			oclType().name)) -> isEmpty()) and (not cf.differences -> select(e | not e.
			conflict.oclIsUndefined()) -> isEmpty()) and
			(name = cf.left.oclType().name);

helper def: conflictingReference(cf: compareMM!Match, name : String): Boolean =
	(not cf.differences -> select(e | compareMM!ReferenceChange.toString().endsWith(e.
			oclType().name)) -> isEmpty()) and (not cf.differences -> select(e | not e.
			conflict.oclIsUndefined()) -> isEmpty()) and
			(name = cf.left.oclType().name);

helper def: addedElementLeft(cf: compareMM!Match, name: String): Boolean =
	cf.origin.oclIsUndefined() and not cf.left.oclIsUndefined() and cf.right.
			oclIsUndefined() and (name = cf.left.oclType().name);

helper def: addedElementRight(cf: compareMM!Match, name: String): Boolean =
	cf.origin.oclIsUndefined() and cf.left.oclIsUndefined() and not cf.right.
			oclIsUndefined() and (name = cf.right.oclType().name);

helper def: getUnchangedElementsByNameCollection(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.origin.oclIsUndefined()) -> select(e | cf.origin.
			refGetValue(name).includes(e.origin));

helper def: getUnchangedElementsByNameSingle(cf: compareMM!Match, name: String):
		compareMM!Match =
	cf.submatches -> select(e | not e.origin.oclIsUndefined()) -> select(e | cf.origin.
			refGetValue(name) = e.origin) -> first();

helper def: getAddedLeftSingle(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.left.oclIsUndefined()) -> select(e | cf.left.
			refGetValue(name) = e.left.eContainer().refGetValue(name)) -> first();

helper def: getAddedLeftCollection(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.left.oclIsUndefined()) -> select(e | cf.left.
			refGetValue(name).includes(e.left));

helper def: getAddedRightSingle(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.left.oclIsUndefined()) -> select(e | cf.right.
			refGetValue(name) = e.right.eContainer().refGetValue(name)) -> first();

helper def: getAddedRightCollection(cf: compareMM!Match, name: String):
		Sequence(compareMM!Match) =
	cf.submatches -> select(e | not e.right.oclIsUndefined()) -> select(e | cf.right.
			refGetValue(name).includes(e.right));

helper def: getAttributeOrigin(Match: compareMM!Match, Attribute: String): String =
	Match.origin.refGetValue(Attribute);

helper def: getAttribute(Match: compareMM!Match, Attribute: String, direction: String):
		String =
	Match.refGetValue(direction).refGetValue(Attribute);

--	Sequence{};
helper def: getAttributeChanged(match: compareMM!Match, name: String, direction: String):
		OclAny =
	match.differences -> select(e | e.attribute.name = name).first().eContainer().
			refGetValue(direction).refGetValue(name);

------------------------------------ References ------------------------------------

helper def: getMember_relatives(Match: compareMM!Match): String =
	if (not Match.origin.relatives.oclIsUndefined()) then 
                          compareMM!Match.allInstances()
                            ->select(e | not e.origin.oclIsUndefined())
                              ->select(e | e.origin.oclIsTypeOf(UFamiliesMM!Member))
                                ->select(e | (e.origin = Match.origin.relatives)).first()
                        else OclUndefined endif;

helper def : getFamily_links (links_ref_changes : compareMM!ReferenceChange, Family_match : compareMM!Match) : Sequence(UFamiliesMM!Family) =
  if (not links_ref_changes.first().oclIsUndefined()) 
  then if (links_ref_changes.first().source = #LEFT) 
      then compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(UFamiliesMM!Family))
          ->select(e | Family_match.left.links->collect(e | e.lastName).includes(e.origin.lastName))
      else compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | e.origin.oclIsTypeOf(UFamiliesMM!Family))
          ->select(e | Family_match.right.links->collect(e | e.lastName).includes(e.origin.lastName))
      endif
  else compareMM!Match.allInstances()->select(e | not e.origin.oclIsUndefined())->select(e | Family_match.origin.links.includes(e.origin)) endif;

helper def: getReference(Match: compareMM!Match, Reference: String, direction: String):
		String =
	Match.refGetValue(direction).refGetValue(Reference);

helper def: changedReferenceLeft(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #LEFT) -> select(e |
			compareMM!ReferenceChange.toString().endsWith(e.oclType().name)) ->
			isEmpty()) and (cf.differences -> select(e | not e.conflict.oclIsUndefined())
			-> isEmpty()) and (name = cf.left.oclType().name);

helper def: changedReferenceRight(cf: compareMM!Match, name: String): Boolean =
	(not cf.differences -> select(e | e.source = #RIGHT) -> select(e |
			compareMM!ReferenceChange.toString().endsWith(e.oclType().name)) ->
			isEmpty()) and (cf.differences -> select(e | not e.conflict.oclIsUndefined())
			-> isEmpty()) and (name = cf.left.oclType().name);

------------------------------------ References ------------------------------------

-- ###################################################### HELPERS ###################################################### --
-- ####################################################### RULES ####################################################### --

------------------------------------ Matches ------------------------------------

rule match2Family { 
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, 'Family'))
	using {    
		noContainmentReferences : compareMM!ReferenceChange = compare.differences 
								->select(e | e.oclIsTypeOf(compareMM!ReferenceChange))
								->select(e | e.reference.containment = false);

      	links : compareMM!ReferenceChange = noContainmentReferences 
								->select(e | e.reference.name = 'links');     
	}
	to
		fop: UFamiliesMM!Family (
			--attributes
			lastName <- thisModule.getAttribute(compare, 'lastName', 'left')
,			address <- thisModule.getAttribute(compare, 'address', 'left')
,

			--relations
			sons <- thisModule.getUnchangedElementsByNameCollection(compare, 'sons') ->
					append(thisModule.getAddedLeftCollection(compare, 'sons')) ->
					append(thisModule.getAddedRightCollection(compare, 'sons'))
,			daughters <- thisModule.getUnchangedElementsByNameCollection(compare, 'daughters') ->
					append(thisModule.getAddedLeftCollection(compare, 'daughters')) ->
					append(thisModule.getAddedRightCollection(compare, 'daughters'))
,			mother <- thisModule.getUnchangedElementsByNameSingle(compare, 'mother')
,			father <- thisModule.getUnchangedElementsByNameSingle(compare, 'father')
,			links <- thisModule.getFamily_links(links, compare)
		)
	do {
		compare.debug('Family_match'); 
	}
}


rule match2Member { 
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, 'Member') and
									not thisModule.checkContainerConflict(compare, 'Member'))
	to
		f: UFamiliesMM!Member (
			--attributes
			firstName <- thisModule.getAttributeOrigin(compare, 'firstName')
,			age <- thisModule.getAttributeOrigin(compare, 'age')
,

			--relations
			relatives <- thisModule.getMember_relatives(compare)
		)
	do {
		compare.debug('Member_match'); 
	}
}


rule match2FamilyRegistry {
	from
		compare: compareMM!Match (thisModule.checkConservative(compare, 'FamilyRegistry') )
	to
		uFamilies: UFamiliesMM!FamilyRegistry (
			--relations
			families <- thisModule.getUnchangedElementsByNameCollection(compare,
					'families') -> append(thisModule.getAddedLeftCollection(compare,
					'families')) -> append(thisModule.getAddedRightCollection(compare,
					'families'))
		)
	do {
		compare.debug('FamilyRegistry_match'); 
	}
}


rule match2uFamily {
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, 'uFamily') )
	to
		f: UFamiliesMM!uFamily (

			--attribute
			name <- thisModule.getAttributeOrigin(compare, 'name'),

			--relations
			
			uleft <- thisModule.getUnchangedElementsByNameCollection(compare, 'uleft') ->
					append(thisModule.getAddedLeftCollection(compare, 'uleft')) ->
					append(thisModule.getAddedRightCollection(compare, 'uleft')),
			uright <- thisModule.getUnchangedElementsByNameCollection(compare, 'uright')
					-> append(thisModule.getAddedLeftCollection(compare, 'uright')) ->
					append(thisModule.getAddedRightCollection(compare, 'uright')),
			upoint <- thisModule.getUnchangedElementsByNameCollection(compare, 'upoint')
					-> append(thisModule.getAddedLeftCollection(compare, 'upoint')) ->
					append(thisModule.getAddedRightCollection(compare, 'upoint'))
		)
	do {
		compare.debug('uFamily_match'); 
	}
}


rule match2uMember {
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, 'uMember') )
	to
		f: UFamiliesMM!uMember (

			--attribute
			name <- thisModule.getAttributeOrigin(compare, 'name'),

			--relations
			
			uleft <- thisModule.getUnchangedElementsByNameCollection(compare, 'uleft') ->
					append(thisModule.getAddedLeftCollection(compare, 'uleft')) ->
					append(thisModule.getAddedRightCollection(compare, 'uleft')),
			uright <- thisModule.getUnchangedElementsByNameCollection(compare, 'uright')
					-> append(thisModule.getAddedLeftCollection(compare, 'uright')) ->
					append(thisModule.getAddedRightCollection(compare, 'uright')),
			upoint <- thisModule.getUnchangedElementsByNameCollection(compare, 'upoint')
					-> append(thisModule.getAddedLeftCollection(compare, 'upoint')) ->
					append(thisModule.getAddedRightCollection(compare, 'upoint'))
		)
	do {
		compare.debug('uMember_match'); 
	}
}


rule match2uFamilyRegistry {
	from
		compare: compareMM!Match ( thisModule.checkConservative(compare, 'uFamilyRegistry') )
	to
		f: UFamiliesMM!uFamilyRegistry (

			--attribute
			name <- thisModule.getAttributeOrigin(compare, 'name'),

			--relations
			
			uleft <- thisModule.getUnchangedElementsByNameCollection(compare, 'uleft') ->
					append(thisModule.getAddedLeftCollection(compare, 'uleft')) ->
					append(thisModule.getAddedRightCollection(compare, 'uleft')),
			uright <- thisModule.getUnchangedElementsByNameCollection(compare, 'uright')
					-> append(thisModule.getAddedLeftCollection(compare, 'uright')) ->
					append(thisModule.getAddedRightCollection(compare, 'uright')),
			upoint <- thisModule.getUnchangedElementsByNameCollection(compare, 'upoint')
					-> append(thisModule.getAddedLeftCollection(compare, 'upoint')) ->
					append(thisModule.getAddedRightCollection(compare, 'upoint'))
		)
	do {
		compare.debug('uFamilyRegistry_match'); 
	}
}

------------------------------------ Matches 4 -- uMembers------------------------------------
------------------------------------------ Added Left ----------------------------------------

rule addedLeft2Family {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, 'Family') )
	to
		f: UFamiliesMM!Family (
			--attributes
			lastName <- thisModule.getAttribute(compare, 'lastName', 'left')
,			address <- thisModule.getAttribute(compare, 'lastName', 'left')
,
			--relations
			sons <- thisModule.getAddedLeftCollection(compare, 'sons')
,			daughters <- thisModule.getAddedLeftCollection(compare, 'daughters')
,			mother <- thisModule.getAddedLeftSingle(compare, 'mother')
,			father <- thisModule.getAddedLeftSingle(compare, 'father')
,			links <- thisModule.getAddedLeftCollection(compare, 'links')
		)
	do {
		compare.debug('Family_add_L'); 
	}
}


rule addedLeft2Member {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, 'Member') )
	to
		f: UFamiliesMM!Member (
			--attributes
			firstName <- thisModule.getAttribute(compare, 'firstName', 'left')
,			age <- thisModule.getAttribute(compare, 'age', 'left')
,
			--relations
			relatives <- thisModule.getAddedLeftSingle(compare, 'relatives')
		)
	do {
		compare.debug('Member_add_L'); 
	}
}


rule addedLeft2FamilyRegistry {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, 'FamilyRegistry') )
	to
		f: UFamiliesMM!FamilyRegistry (
			--relations
			families <- thisModule.getAddedLeftCollection(compare, 'families')
		)
	do {
		compare.debug('FamilyRegistry_add_L'); 
	}
}


rule addedLeft2uFamily {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, 'uFamily') )
	to
		f: UFamiliesMM!uFamily (
			
			--attribute
				lastName <- thisModule.getAttribute(compare, 'lastName', 'left')
,				address <- thisModule.getAttribute(compare, 'address', 'left')
,

			--relations			
			uleft <- thisModule.getAddedLeftCollection(compare, 'uleft'),
			uright <- thisModule.getAddedLeftCollection(compare, 'uright'),
			upoint <- thisModule.getAddedLeftCollection(compare, 'upoint')
		)
	do {
		compare.debug('uFamily_add_L'); 
	}
}


rule addedLeft2uMember {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, 'uMember') )
	to
		f: UFamiliesMM!uMember (
			
			--attribute
				firstName <- thisModule.getAttribute(compare, 'firstName', 'left')
,				age <- thisModule.getAttribute(compare, 'age', 'left')
,

			--relations			
			uleft <- thisModule.getAddedLeftCollection(compare, 'uleft'),
			uright <- thisModule.getAddedLeftCollection(compare, 'uright'),
			upoint <- thisModule.getAddedLeftCollection(compare, 'upoint')
		)
	do {
		compare.debug('uMember_add_L'); 
	}
}


rule addedLeft2uFamilyRegistry {
	from
		compare: compareMM!Match ( thisModule.addedElementLeft(compare, 'uFamilyRegistry') )
	to
		f: UFamiliesMM!uFamilyRegistry (
			
			--attribute

			--relations			
			uleft <- thisModule.getAddedLeftCollection(compare, 'uleft'),
			uright <- thisModule.getAddedLeftCollection(compare, 'uright'),
			upoint <- thisModule.getAddedLeftCollection(compare, 'upoint')
		)
	do {
		compare.debug('uFamilyRegistry_add_L'); 
	}
}

------------------------------------ Added Left ------------------------------------
------------------------------------ Added Right ------------------------------------

rule addedRight2Family {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, 'Family') )
	to
		f: UFamiliesMM!Family (
			--attributes
			lastName <- thisModule.getAttribute(compare, 'lastName', 'right')
,			address <- thisModule.getAttribute(compare, 'lastName', 'right')
,
			--relations
			sons <- thisModule.getAddedRightCollection(compare, 'sons')
,			daughters <- thisModule.getAddedRightCollection(compare, 'daughters')
,			mother <- thisModule.getAddedRightSingle(compare, 'mother')
,			father <- thisModule.getAddedRightSingle(compare, 'father')
,			links <- thisModule.getAddedRightCollection(compare, 'links')
		)
	do {
		compare.debug('Family_add_R'); 
	}
}


rule addedRight2Member {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, 'Member') )
	to
		f: UFamiliesMM!Member (
			--attributes
			firstName <- thisModule.getAttribute(compare, 'firstName', 'right')
,			age <- thisModule.getAttribute(compare, 'age', 'right')
,
			--relations
			relatives <- thisModule.getAddedRightSingle(compare, 'relatives')
		)
	do {
		compare.debug('Member_add_R'); 
	}
}


rule addedRight2FamilyRegistry {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, 'FamilyRegistry') )
	to
		f: UFamiliesMM!FamilyRegistry (
			--relations
			families <- thisModule.getAddedRightCollection(compare, 'families')
		)
	do {
		compare.debug('FamilyRegistry_add_R'); 
	}
}


rule addedRight2uFamily {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, 'uFamily') )
	to
		f: UFamiliesMM!uFamily (

			--attribute
				lastName <- thisModule.getAttribute(compare, 'lastName', 'right')
,				address <- thisModule.getAttribute(compare, 'address', 'right')
,

			--relations			
			uleft <- thisModule.getAddedRightCollection(compare, 'uleft'),
			uright <- thisModule.getAddedRightCollection(compare, 'uright'),
			upoint <- thisModule.getAddedRightCollection(compare, 'upoint')
		)
	do {
		compare.debug('uFamily_add_R'); 
	}
}


rule addedRight2uMember {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, 'uMember') )
	to
		f: UFamiliesMM!uMember (

			--attribute
				firstName <- thisModule.getAttribute(compare, 'firstName', 'right')
,				age <- thisModule.getAttribute(compare, 'age', 'right')
,

			--relations			
			uleft <- thisModule.getAddedRightCollection(compare, 'uleft'),
			uright <- thisModule.getAddedRightCollection(compare, 'uright'),
			upoint <- thisModule.getAddedRightCollection(compare, 'upoint')
		)
	do {
		compare.debug('uMember_add_R'); 
	}
}


rule addedRight2uFamilyRegistry {
	from
		compare: compareMM!Match ( thisModule.addedElementRight(compare, 'uFamilyRegistry') )
	to
		f: UFamiliesMM!uFamilyRegistry (

			--attribute

			--relations			
			uleft <- thisModule.getAddedRightCollection(compare, 'uleft'),
			uright <- thisModule.getAddedRightCollection(compare, 'uright'),
			upoint <- thisModule.getAddedRightCollection(compare, 'upoint')
		)
	do {
		compare.debug('uFamilyRegistry_add_R'); 
	}
}

------------------------------------ Added Right ------------------------------------

rule changeLeftandRight2Family {
	from compare: compareMM!Match (
		(thisModule.changedAttributesLeft(compare, 'Family') and thisModule.changedAttributesRight(compare, 'Family'))
		or
		(thisModule.changedReferenceLeft(compare, 'Family') and thisModule.changedReferenceRight(compare, 'Family'))
		)
	to
		f: UFamiliesMM!Family (
			--attribute
			lastName <- thisModule.getAttribute(compare, 'lastName', 'origin')
,			address <- thisModule.getAttribute(compare, 'address', 'origin')
,
			--relations
			sons <- thisModule.getUnchangedElementsByNameCollection(compare, 'sons') ->
					append(thisModule.getAddedLeftCollection(compare, 'sons')) ->
					append(thisModule.getAddedRightCollection(compare, 'sons'))
,			daughters <- thisModule.getUnchangedElementsByNameCollection(compare, 'daughters') ->
					append(thisModule.getAddedLeftCollection(compare, 'daughters')) ->
					append(thisModule.getAddedRightCollection(compare, 'daughters'))
,			mother <- thisModule.getUnchangedElementsByNameSingle(compare, 'mother')
,			father <- thisModule.getUnchangedElementsByNameSingle(compare, 'father')
,			links <- thisModule.getUnchangedElementsByNameCollection(compare, 'links') ->
					append(thisModule.getAddedLeftCollection(compare, 'links')) ->
					append(thisModule.getAddedRightCollection(compare, 'links'))
		)
	do {
		compare.debug('changes2Family'); 
	}
}





------------------------------------ Changed Left ------------------------------------

rule changeLeft2Family {
	from
		compare: compareMM!Match ( 
			(thisModule.changedAttributesLeft(compare, 'Family') and not thisModule.changedAttributesRight(compare, 'Family'))
			or 
			(thisModule.changedReferenceLeft(compare, 'Family') and not thisModule.changedReferenceRight(compare, 'Family'))
			)
	to
		f: UFamiliesMM!Family (
			--attribute
			lastName <- thisModule.getAttribute(compare, 'lastName', 'left')
,			address <- thisModule.getAttribute(compare, 'address', 'left')
,

			--relations
			sons <- thisModule.getUnchangedElementsByNameCollection(compare,
					'sons') -> append(thisModule.getAddedLeftCollection(compare,
					'sons')) -> append(thisModule.getAddedRightCollection(compare,
					'sons'))
,			daughters <- thisModule.getUnchangedElementsByNameCollection(compare,
					'daughters') -> append(thisModule.getAddedLeftCollection(compare,
					'daughters')) -> append(thisModule.getAddedRightCollection(compare,
					'daughters'))
,			mother <- thisModule.getUnchangedElementsByNameSingle(compare, 'mother')
,			father <- thisModule.getUnchangedElementsByNameSingle(compare, 'father')
,			links <- thisModule.getUnchangedElementsByNameCollection(compare,
					'links') -> append(thisModule.getAddedLeftCollection(compare,
					'links')) -> append(thisModule.getAddedRightCollection(compare,
					'links'))
		)
	do {
		compare.debug('Family_changed_L'); 
	}
}


rule changeLeft2Member {
	from
		compare: compareMM!Match ( thisModule.changedAttributesLeft(compare, 'Member') or 
			thisModule.changedReferenceLeft(compare, 'Member') )
	to
		f: UFamiliesMM!Member (
			firstName <- thisModule.getAttribute(compare, 'firstName', 'left')
,			age <- thisModule.getAttribute(compare, 'age', 'left')
,
			--relations
			relatives <- thisModule.getMember_relatives(compare)
		)
	do {
		compare.debug('Member_changed_L'); 
	}
}


rule changeLeft2FamilyRegistry {
	from
		compare: compareMM!Match ( thisModule.changedAttributesLeft(compare, 'FamilyRegistry') or 
			thisModule.changedReferenceLeft(compare, 'FamilyRegistry') )
	to
		f: UFamiliesMM!FamilyRegistry (
			--relations
			families <- thisModule.getAddedLeftCollection(compare, 'families')
		)
	do {
		compare.debug('FamilyRegistry_changed_L'); 
	}
}

------------------------------------ Changed Left -------------------------------------
------------------------------------ Changed Right ------------------------------------

rule changeRight2Family {
	from
		compare: compareMM!Match (
			(thisModule.changedAttributesRight(compare, 'Family') and not thisModule.changedAttributesLeft(compare, 'Family')) 
			or 
			(thisModule.changedReferenceRight(compare, 'Family') and not thisModule.changedReferenceLeft(compare, 'Family'))
			)
	to
		f: UFamiliesMM!Family (
			--attribute
			lastName <- thisModule.getAttribute(compare, 'lastName', 'right')
,			address <- thisModule.getAttribute(compare, 'address', 'right')
,
			
			--relations
			sons <- thisModule.getUnchangedElementsByNameCollection(compare, 'sons') ->
					append(thisModule.getAddedLeftCollection(compare, 'sons')) ->
					append(thisModule.getAddedRightCollection(compare, 'sons'))
,			daughters <- thisModule.getUnchangedElementsByNameCollection(compare, 'daughters') ->
					append(thisModule.getAddedLeftCollection(compare, 'daughters')) ->
					append(thisModule.getAddedRightCollection(compare, 'daughters'))
,			mother <- thisModule.getUnchangedElementsByNameSingle(compare, 'mother')
,			father <- thisModule.getUnchangedElementsByNameSingle(compare, 'father')
,			links <- thisModule.getUnchangedElementsByNameCollection(compare, 'links') ->
					append(thisModule.getAddedLeftCollection(compare, 'links')) ->
					append(thisModule.getAddedRightCollection(compare, 'links'))
		)
	do {
		compare.debug('Family_changed_R'); 
	}
}



rule changeRight2Member {
	from
		compare: compareMM!Match (
			thisModule.changedAttributesRight(compare, 'Member') or thisModule.
					changedReferenceRight(compare, 'Member')
		)
	to
		f: UFamiliesMM!Member (
			--attribute
			firstName <- thisModule.getAttribute(compare, 'firstName', 'right')
,			age <- thisModule.getAttribute(compare, 'age', 'right')
,

			--relations
			relatives <- thisModule.getMember_relatives(compare, 'relatives', 'right')
		)
	do {
		compare.debug('Member_changed_R'); 
	}
}



rule changeRight2FamilyRegistry {
	from
		compare: compareMM!Match ( thisModule.changedAttributesRight(compare, 'FamilyRegistry') or 
			thisModule.changedReferenceRight(compare, 'FamilyRegistry') )
	to
		f: UFamiliesMM!FamilyRegistry (
			--relations
			families <- thisModule.getAddedRightCollection(compare, 'families')
		)
	do {
		compare.debug('FamilyRegistry_changed_R'); 
	}
}


------------------------------------ Changed Right ------------------------------------
-------------------------------------- Conflicts --------------------------------------

rule ConflictAFamily {
	from
		compare: compareMM!Match (
			thisModule.conflictingAttributes(compare, 'Family') or thisModule.
					conflictingReference(compare, 'Family')
		)
	to
		f: UFamiliesMM!uFamily (
			uleft <- left,
			uright <- right,
			utype <- #OR
		),
		left: UFamiliesMM!Family (
			--attributes
			lastName <- thisModule.getAttribute(compare, 'lastName', 'left')
,			address <- thisModule.getAttribute(compare, 'address', 'left')
,
			
			--relations
			sons <- compare.origin.sons -> collect(e |thisModule.cloneMembers(e))
,			daughters <- compare.origin.daughters -> collect(e |thisModule.cloneMembers(e))
,			mother <- thisModule.cloneMembers(compare.origin.mother)
,			father <- thisModule.cloneMembers(compare.origin.father)
,			links <- compare.origin.links -> collect(e |thisModule.cloneMembers(e))
		),
		right: UFamiliesMM!Family (
			--attributes
			lastName <- thisModule.getAttribute(compare, 'lastName', 'right')
,			address <- thisModule.getAttribute(compare, 'address', 'right')
,
			
			--relations
			sons <- compare.origin.sons -> collect(e |thisModule.cloneMembers(e))
,			daughters <- compare.origin.daughters -> collect(e |thisModule.cloneMembers(e))
,			mother <- thisModule.cloneMembers(compare.origin.mother)
,			father <- thisModule.cloneMembers(compare.origin.father)
,			links <- compare.origin.links -> collect(e |thisModule.cloneMembers(e))
		)
	do {
		compare.debug('Family_conflict'); 
	}
}


rule ConflictAMember {
	from
		match: compareMM!Match (
			thisModule.conflictingAttributes(match, 'Member') or thisModule.
					conflictingReference(match, 'Member')
		)
	to
		f: UFamiliesMM!uMember (
			uleft <- left,
			uright <- right,
			utype <- #OR
		),
		left: UFamiliesMM!Member (
			--attribute
			firstName <- thisModule.getAttribute(match, 'firstName', 'left')
,			age <- thisModule.getAttribute(match, 'age', 'left')
,

			--relations
			relatives <- thisModule.getReference(match, 'relatives', 'left')
		),
		right: UFamiliesMM!Member (
			--attribute
			firstName <- thisModule.getAttribute(match, 'firstName', 'right')
,			age <- thisModule.getAttribute(match, 'age', 'right')
,
			
			--relations
			relatives <- thisModule.getReference(match, 'relatives', 'right')
		)
	do {
		match.debug('Member_conflict'); 
	}
}



------------------------------------ Lazy rule --------------------------------------



lazy rule cloneMember {
	from 
		compare: UFamiliesMM!Member (
			thisModule.checkConservative(compare, 'Member') 
		)
	to 
		Member: UFamiliesMM!Member (
			--attributes
			firstName <- compare.firstName
,			age <- compare.age
		)
	do {
		compare.debug('Member_clone'); 
	}
}


